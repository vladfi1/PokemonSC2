import a.util.Set;
import a.util.ArraySet;
import a.util.Map;
import a.util.ArrayMap;
import a.natives.Player;
import a.natives.playergroup;
import a.natives.unit;
import a.natives.trigger;
import a.natives.region;

include "pokemon.a"
include "species.a"
include "rental.a"
include "lb.a"

private void initTrainer(int player, Team team) {
    Player p = (Player) player;
    if (!p.isActive()) return;
    
    Trainer trainer = new Trainer(p, team);
    System.debug("Added player " + p.toString() + " to " + team.name);
    
    makeRentalCenter(p);
    CameraPan(player, p.startLocation, 0, 0, 0, false);
}

static {
    Trainer.trainers = new ArrayMap<Player, Trainer>();
    
    Team.left = new Team("Left", Point(8, 36), (Player) 9);
    Team.right = new Team("Right", Point(136, 36), (Player) 10);
    Team.left.enemy = Team.right;
    Team.right.enemy = Team.left;
    Team.teams[0] = Team.left;
    Team.teams[1] = Team.right;

    initTrainer(1, Team.left);
    initTrainer(2, Team.left);
    initTrainer(3, Team.right);
    initTrainer(4, Team.right);
    
    libNtve_gf_SetPlayerGroupAlliance(Team.left.group, 2);
    libNtve_gf_SetPlayerGroupAlliance(Team.right.group, 2);
    
    updateLeaderBoard();
}

class Team {
    static Team[2] teams;
    static Team left, right;
    
    string name;
    
    point spawn;
    Trainer cpu;
    
    int lives;
    region vulnerable;
    
    playergroup group;
    Set<Trainer> trainers;
    
    Team enemy;
    
    Team(string name, point spawn, Player cpu) {
        this.name = name + " Team";
        this.spawn = spawn;
        this.lives = 100;
        this.vulnerable = region.rect(cpu.startLocation, 2, region.entireMap().height);
        trigger.create("vulnerable" + name).addEventUnitRegion(null, this.vulnerable, true);
        group = playergroup.empty();
        group.add(cpu);
        this.trainers = new ArraySet<Trainer>();
        this.cpu = new Trainer(cpu, this);
    }
    
    public int size() {
        return trainers.size();
    }
    
    public string toString() {
        return name;
    }
    
    public void addTrainer(Trainer trainer) {
        trainers.add(trainer);
        group.add(trainer.player);
    }
}

private bool vulnerableLeft(bool conditions, bool actions) {
    Pokemon p = Pokemon.fromUnit(EventUnit());
    Team team = p.owner.team.enemy;
    if (team == Team.left) {
        team.lives -= 1;
        updateLeaderBoard();
        p.remove();
    }
    return true;
}

private bool vulnerableRight(bool conditions, bool actions) {
    Pokemon p = Pokemon.fromUnit(EventUnit());
    Team team = p.owner.team.enemy;
    if (team == Team.right) {
        team.lives -= 1;
        updateLeaderBoard();
        p.remove();
    }
    return true;
}

class Trainer {
    public static Map<Player, Trainer> trainers;
    
    public static Trainer getTrainer(int player) {
        return trainers.getValue((Player)player);
    }
    
    Player player;
    Team team;
    Set<Pokemon> pokemon;
    
    public Trainer(Player player, Team team) {
        this.player = player;
        player.minerals = 100;
        this.team = team;
        team.addTrainer(this);
        this.pokemon = new ArraySet<Pokemon>();
        trainers.put(player, this);
    }
    
    public void addPokemon(PokemonSpecies species) {
        pokemon.add(new Pokemon(species, 10, this, team.spawn));
    }
    
    public static void addPokemon(Player player, PokemonSpecies species) {
        trainers.getValue(player).addPokemon(species);
    }
    
    public string toString() {
        return "Trainer " + player.toString();
    }
}
